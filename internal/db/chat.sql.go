// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chat.sql

package db

import (
	"context"
)

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM
    chat_tag
WHERE
    chat_id = ?
    AND name = ?
`

type DeleteTagParams struct {
	ChatID string
	Name   string
}

func (q *Queries) DeleteTag(ctx context.Context, arg DeleteTagParams) error {
	_, err := q.db.ExecContext(ctx, deleteTag, arg.ChatID, arg.Name)
	return err
}

const findChat = `-- name: FindChat :one
SELECT
    title,
    messages
FROM
    chat
WHERE
    id = ?
`

type FindChatRow struct {
	Title    string
	Messages []byte
}

func (q *Queries) FindChat(ctx context.Context, id string) (FindChatRow, error) {
	row := q.db.QueryRowContext(ctx, findChat, id)
	var i FindChatRow
	err := row.Scan(&i.Title, &i.Messages)
	return i, err
}

const findChatTitles = `-- name: FindChatTitles :many
SELECT
    id,
    title
FROM
    chat
`

type FindChatTitlesRow struct {
	ID    string
	Title string
}

func (q *Queries) FindChatTitles(ctx context.Context) ([]FindChatTitlesRow, error) {
	rows, err := q.db.QueryContext(ctx, findChatTitles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindChatTitlesRow
	for rows.Next() {
		var i FindChatTitlesRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTags = `-- name: FindTags :many
SELECT
    name
FROM
    chat_tag
WHERE
    chat_id = ?
`

func (q *Queries) FindTags(ctx context.Context, chatID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, findTags, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveChat = `-- name: SaveChat :exec
INSERT INTO
    chat (id, title, messages)
VALUES
    (?, ?, ?) ON conflict DO
UPDATE
SET
    title = excluded.title,
    messages = excluded.messages,
    updated_at = unixepoch()
`

type SaveChatParams struct {
	ID       string
	Title    string
	Messages []byte
}

func (q *Queries) SaveChat(ctx context.Context, arg SaveChatParams) error {
	_, err := q.db.ExecContext(ctx, saveChat, arg.ID, arg.Title, arg.Messages)
	return err
}

const saveTag = `-- name: SaveTag :exec
INSERT INTO
    chat_tag (chat_id, name)
VALUES
    (?, ?)
`

type SaveTagParams struct {
	ChatID string
	Name   string
}

func (q *Queries) SaveTag(ctx context.Context, arg SaveTagParams) error {
	_, err := q.db.ExecContext(ctx, saveTag, arg.ChatID, arg.Name)
	return err
}
