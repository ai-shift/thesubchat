// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chat.sql

package db

import (
	"context"
)

const findChat = `-- name: FindChat :one
SELECT
    title,
    messages
FROM
    chat
WHERE
    id = ?
`

type FindChatRow struct {
	Title    string
	Messages []byte
}

func (q *Queries) FindChat(ctx context.Context, id string) (FindChatRow, error) {
	row := q.db.QueryRowContext(ctx, findChat, id)
	var i FindChatRow
	err := row.Scan(&i.Title, &i.Messages)
	return i, err
}

const saveChat = `-- name: SaveChat :exec
INSERT INTO
    chat (id, title, messages)
VALUES
    (?, ?, ?) ON conflict DO
UPDATE
SET
    title = excluded.title,
    messages = excluded.messages
`

type SaveChatParams struct {
	ID       string
	Title    string
	Messages []byte
}

func (q *Queries) SaveChat(ctx context.Context, arg SaveChatParams) error {
	_, err := q.db.ExecContext(ctx, saveChat, arg.ID, arg.Title, arg.Messages)
	return err
}
